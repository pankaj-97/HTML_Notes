One nuance with absolute positioning is that it will be locked relative to its closest positioned ancestor. 
If you forget to add a position rule to the parent item, (this is typically done using position: relative;), 
the browser will keep looking up the chain and ultimately default to the body tag.
this we have add postion :relative in it's paert w.rt to who we want to position it.
ex-->#searchbar {
  position:absolute;
  top:50px;
  right:50px; }
  section {
    position: relative;
  }
  and it also remove element from the normal flow 
  
  Fixed-Positioning--->
  
  the next layout scheme that CSS offers is the fixed position, which is a type of absolute positioning that locks 
  an element relative to the browser window. Similar to absolute positioning, 
  it's used with the CSS offset properties and also removes the element from the normal flow of the document.
  Other items no longer "realize" where it is positioned, which may require some layout adjustments elsewhere.
  
  Difference between absolute and fixed-->
  One key difference between the fixed and absolute positions is 
  that an element with a fixed position won't move when the user scrolls.
  
  z-index--> to set which element should come over nother when they are adjusted using posion using relative ,absolute or fixed.
  to use z-index in an element it should hava a  position attribute in itself.
  When elements are positioned to overlap (i.e. using position: absolute | relative | fixed | sticky), 
  the element coming later in the HTML markup will, by default, appear on the top of the other elements.
  However, the z-index property can specify the order of how elements are stacked on top of one another. 
  It must be an integer (i.e. a whole number and not a decimal), and higher values for the z-index property of an element move it higher in the stack than those with lower values.


  
